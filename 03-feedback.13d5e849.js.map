{"mappings":"qBAcA,SAASA,EAASC,EAAMC,EAAMC,GAC5B,IAAIC,EAASC,EAAMC,EAASC,EAAWC,EAGvC,SAASC,IACP,IAAIC,EAAOC,KAAKC,MAAQL,EAEpBG,EAAOR,GAAQQ,GAAQ,EACzBN,EAAUS,WAAWJ,EAAOP,EAAOQ,IAEnCN,EAAU,KACLD,IACHK,EAASP,EAAKa,MAAMR,EAASD,GAC7BC,EAAUD,EAAO,OAXnB,MAAQH,IAAMA,EAAO,KAgBzB,IAAIa,EAAY,WACdT,EAAUU,KACVX,EAAOY,UACPV,EAAYI,KAAKC,MACjB,IAAIM,EAAUf,IAAcC,EAO5B,OANKA,IAASA,EAAUS,WAAWJ,EAAOP,IACtCgB,IACFV,EAASP,EAAKa,MAAMR,EAASD,GAC7BC,EAAUD,EAAO,MAGZG,GAoBT,OAjBAO,EAAUI,MAAQ,WACZf,IACFgB,aAAahB,GACbA,EAAU,OAIdW,EAAUM,MAAQ,WACZjB,IACFI,EAASP,EAAKa,MAAMR,EAASD,GAC7BC,EAAUD,EAAO,KAEjBe,aAAahB,GACbA,EAAU,OAIPW,EAITf,EAASsB,SAAWtB,EAEpBuB,EAAiBvB,ECnEjB,IAOIwB,EAPEC,EAAO,CACXC,KAAMC,SAASC,cAAc,kBAC7BC,MAAOF,SAASC,cAAc,wBAC9BE,SAAUH,SAASC,cAAc,4BAG/BG,EAAW,GA6BfN,EAAKC,KAAKM,iBAAiB,UAfN,SAAAC,GACnBA,EAAIC,iBACJD,EAAIE,cAAcC,QAClBC,aAAaC,WAAW,uBACxBC,QAAQC,IAAI,yBAYdf,EAAKC,KAAKM,iBAAiB,QAAST,GA3Bf,SAAAU,GACnBA,EAAIC,iBACAV,IACFO,EAAWU,KAAKC,MAAML,aAAaM,QAAQ,yBAE7CZ,EAASE,EAAIW,OAAOC,MAAQZ,EAAIW,OAAOE,MACvCP,QAAQC,IAAIT,GACZM,aAAaU,QAAQ,sBAAuBN,KAAKO,UAAUjB,IAC3DQ,QAAQC,IAAIT,KAmB6C,MAC3DkB,OAAOjB,iBAAiB,QAVN,SAAAC,IAChBT,EAAYiB,KAAKC,MAAML,aAAaM,QAAQ,2BAE1CnB,EAAUK,QAASJ,EAAKI,MAAMiB,MAAQtB,EAAUK,OAChDL,EAAU0B,UAAWzB,EAAKK,SAASgB,MAAQtB,EAAU0B,a","sources":["node_modules/debounce/index.js","src/js/03-feedback.js"],"sourcesContent":["/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\nfunction debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n// Adds compatibility for ES modules\ndebounce.debounce = debounce;\n\nmodule.exports = debounce;\n","var debounce = require('debounce');\n\nconst refs = {\n  form: document.querySelector('.feedback-form'),\n  email: document.querySelector('.feedback-form input'),\n  textarea: document.querySelector('.feedback-form textarea'),\n};\n\nlet formData = {};\nlet savedData;\n\nconst onInputEvent = evt => {\n  evt.preventDefault();\n  if (savedData) {\n    formData = JSON.parse(localStorage.getItem('feedback-form-state'));\n  }\n  formData[evt.target.name] = evt.target.value;\n  console.log(formData);\n  localStorage.setItem('feedback-form-state', JSON.stringify(formData));\n  console.log(formData);\n};\n\nconst onFormSubmit = evt => {\n  evt.preventDefault();\n  evt.currentTarget.reset();\n  localStorage.removeItem('feedback-form-state');\n  console.log('Відправляємо форму');\n};\n\nconst onRefresh = evt => {\n  savedData = JSON.parse(localStorage.getItem('feedback-form-state'));\n  if (savedData) {\n    savedData.email ? (refs.email.value = savedData.email) : '';\n    savedData.message ? (refs.textarea.value = savedData.message) : '';\n  }\n};\n\nrefs.form.addEventListener('submit', onFormSubmit);\nrefs.form.addEventListener('input', debounce(onInputEvent, 200));\nwindow.addEventListener('load', onRefresh);\n"],"names":["$004cd6322d5b1502$var$debounce","func","wait","immediate","timeout","args","context","timestamp","result","later","last","Date","now","setTimeout","apply","debounced","this","arguments","callNow","clear","clearTimeout","flush","debounce","$004cd6322d5b1502$exports","$b00c40859be242c5$var$savedData","$b00c40859be242c5$var$refs","form","document","querySelector","email","textarea","$b00c40859be242c5$var$formData","addEventListener","evt","preventDefault","currentTarget","reset","localStorage","removeItem","console","log","JSON","parse","getItem","target","name","value","setItem","stringify","window","message"],"version":3,"file":"03-feedback.13d5e849.js.map"}